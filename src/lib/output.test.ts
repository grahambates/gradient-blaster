import { Color } from "../types";
import { restoreBits } from "./bitDepth";
import * as output from "./output";
import targets from "./targets";

const values: Color[] = [...Array(255)].map((_, i) => [i, i, i]);

describe("output", () => {
  describe("buildCopperList()", () => {
    it("formats for amigaOcs", () => {
      let result = output.buildCopperList(values, {
        varName: "Gradient",
        target: targets.amigaOcs,
      });
      expect(result).toBe(`Gradient:
	dc.w $2b07,$fffe
	dc.w $180,$000
	dc.w $3b07,$fffe
	dc.w $180,$111
	dc.w $4b07,$fffe
	dc.w $180,$222
	dc.w $5b07,$fffe
	dc.w $180,$333
	dc.w $6b07,$fffe
	dc.w $180,$444
	dc.w $7b07,$fffe
	dc.w $180,$555
	dc.w $8b07,$fffe
	dc.w $180,$666
	dc.w $9b07,$fffe
	dc.w $180,$777
	dc.w $ab07,$fffe
	dc.w $180,$888
	dc.w $bb07,$fffe
	dc.w $180,$999
	dc.w $cb07,$fffe
	dc.w $180,$aaa
	dc.w $db07,$fffe
	dc.w $180,$bbb
	dc.w $eb07,$fffe
	dc.w $180,$ccc
	dc.w $fb07,$fffe
	dc.w $180,$ddd
	dc.w $ffdf,$fffe ; PAL fix
	dc.w $b07,$fffe
	dc.w $180,$eee
	dc.w $1b07,$fffe
	dc.w $180,$fff
	dc.w $ffff,$fffe ; End copper list`);
    });

    it("formats for amigaAga", () => {
      let result = output.buildCopperList(values, {
        varName: "Gradient",
        target: targets.amigaAga,
      });
      // Output too long to include in full
      expect(result).toContain(`Gradient:
	dc.w $2b07,$fffe
	dc.w $180,$000
	dc.w $106,$200
	dc.w $180,$000
	dc.w $106,$000
	dc.w $2c07,$fffe
	dc.w $180,$000
	dc.w $106,$200
	dc.w $180,$111
	dc.w $106,$000
	dc.w $2d07,$fffe
	dc.w $180,$000
	dc.w $106,$200
	dc.w $180,$222
	dc.w $106,$000`);
      expect(result).toContain("dc.w $ffdf,$fffe ; PAL fix");
      expect(result).toContain("dc.w $ffff,$fffe ; End copper list");
    });

    it("allows setting color index", () => {
      let result = output.buildCopperList(values, {
        varName: "Gradient",
        target: targets.amigaOcs,
        colorIndex: 1,
      });
      expect(result).toContain(`dc.w $182,$000`);
    });
  });

  describe("formatTableAsm()", () => {
    it("formats for amigaOcs", () => {
      let result = output.formatTableAsm(values, {
        rowSize: 8,
        varName: "Gradient",
        target: targets.amigaOcs,
      });
      expect(result).toBe(`Gradient:
	dc.w $000,$000,$000,$000,$000,$000,$000,$000
	dc.w $000,$000,$000,$000,$000,$000,$000,$000
	dc.w $111,$111,$111,$111,$111,$111,$111,$111
	dc.w $111,$111,$111,$111,$111,$111,$111,$111
	dc.w $222,$222,$222,$222,$222,$222,$222,$222
	dc.w $222,$222,$222,$222,$222,$222,$222,$222
	dc.w $333,$333,$333,$333,$333,$333,$333,$333
	dc.w $333,$333,$333,$333,$333,$333,$333,$333
	dc.w $444,$444,$444,$444,$444,$444,$444,$444
	dc.w $444,$444,$444,$444,$444,$444,$444,$444
	dc.w $555,$555,$555,$555,$555,$555,$555,$555
	dc.w $555,$555,$555,$555,$555,$555,$555,$555
	dc.w $666,$666,$666,$666,$666,$666,$666,$666
	dc.w $666,$666,$666,$666,$666,$666,$666,$666
	dc.w $777,$777,$777,$777,$777,$777,$777,$777
	dc.w $777,$777,$777,$777,$777,$777,$777,$777
	dc.w $888,$888,$888,$888,$888,$888,$888,$888
	dc.w $888,$888,$888,$888,$888,$888,$888,$888
	dc.w $999,$999,$999,$999,$999,$999,$999,$999
	dc.w $999,$999,$999,$999,$999,$999,$999,$999
	dc.w $aaa,$aaa,$aaa,$aaa,$aaa,$aaa,$aaa,$aaa
	dc.w $aaa,$aaa,$aaa,$aaa,$aaa,$aaa,$aaa,$aaa
	dc.w $bbb,$bbb,$bbb,$bbb,$bbb,$bbb,$bbb,$bbb
	dc.w $bbb,$bbb,$bbb,$bbb,$bbb,$bbb,$bbb,$bbb
	dc.w $ccc,$ccc,$ccc,$ccc,$ccc,$ccc,$ccc,$ccc
	dc.w $ccc,$ccc,$ccc,$ccc,$ccc,$ccc,$ccc,$ccc
	dc.w $ddd,$ddd,$ddd,$ddd,$ddd,$ddd,$ddd,$ddd
	dc.w $ddd,$ddd,$ddd,$ddd,$ddd,$ddd,$ddd,$ddd
	dc.w $eee,$eee,$eee,$eee,$eee,$eee,$eee,$eee
	dc.w $eee,$eee,$eee,$eee,$eee,$eee,$eee,$eee
	dc.w $fff,$fff,$fff,$fff,$fff,$fff,$fff,$fff
	dc.w $fff,$fff,$fff,$fff,$fff,$fff,$fff`);
    });

    it("formats for amigaAga", () => {
      let result = output.formatTableAsm(values, {
        rowSize: 8,
        varName: "Gradient",
        target: targets.amigaAga,
      });
      expect(result).toBe(`Gradient:
	dc.w $000,$000,$000,$111,$000,$222,$000,$333
	dc.w $000,$444,$000,$555,$000,$666,$000,$777
	dc.w $000,$888,$000,$999,$000,$aaa,$000,$bbb
	dc.w $000,$ccc,$000,$ddd,$000,$eee,$000,$fff
	dc.w $111,$000,$111,$111,$111,$222,$111,$333
	dc.w $111,$444,$111,$555,$111,$666,$111,$777
	dc.w $111,$888,$111,$999,$111,$aaa,$111,$bbb
	dc.w $111,$ccc,$111,$ddd,$111,$eee,$111,$fff
	dc.w $222,$000,$222,$111,$222,$222,$222,$333
	dc.w $222,$444,$222,$555,$222,$666,$222,$777
	dc.w $222,$888,$222,$999,$222,$aaa,$222,$bbb
	dc.w $222,$ccc,$222,$ddd,$222,$eee,$222,$fff
	dc.w $333,$000,$333,$111,$333,$222,$333,$333
	dc.w $333,$444,$333,$555,$333,$666,$333,$777
	dc.w $333,$888,$333,$999,$333,$aaa,$333,$bbb
	dc.w $333,$ccc,$333,$ddd,$333,$eee,$333,$fff
	dc.w $444,$000,$444,$111,$444,$222,$444,$333
	dc.w $444,$444,$444,$555,$444,$666,$444,$777
	dc.w $444,$888,$444,$999,$444,$aaa,$444,$bbb
	dc.w $444,$ccc,$444,$ddd,$444,$eee,$444,$fff
	dc.w $555,$000,$555,$111,$555,$222,$555,$333
	dc.w $555,$444,$555,$555,$555,$666,$555,$777
	dc.w $555,$888,$555,$999,$555,$aaa,$555,$bbb
	dc.w $555,$ccc,$555,$ddd,$555,$eee,$555,$fff
	dc.w $666,$000,$666,$111,$666,$222,$666,$333
	dc.w $666,$444,$666,$555,$666,$666,$666,$777
	dc.w $666,$888,$666,$999,$666,$aaa,$666,$bbb
	dc.w $666,$ccc,$666,$ddd,$666,$eee,$666,$fff
	dc.w $777,$000,$777,$111,$777,$222,$777,$333
	dc.w $777,$444,$777,$555,$777,$666,$777,$777
	dc.w $777,$888,$777,$999,$777,$aaa,$777,$bbb
	dc.w $777,$ccc,$777,$ddd,$777,$eee,$777,$fff
	dc.w $888,$000,$888,$111,$888,$222,$888,$333
	dc.w $888,$444,$888,$555,$888,$666,$888,$777
	dc.w $888,$888,$888,$999,$888,$aaa,$888,$bbb
	dc.w $888,$ccc,$888,$ddd,$888,$eee,$888,$fff
	dc.w $999,$000,$999,$111,$999,$222,$999,$333
	dc.w $999,$444,$999,$555,$999,$666,$999,$777
	dc.w $999,$888,$999,$999,$999,$aaa,$999,$bbb
	dc.w $999,$ccc,$999,$ddd,$999,$eee,$999,$fff
	dc.w $aaa,$000,$aaa,$111,$aaa,$222,$aaa,$333
	dc.w $aaa,$444,$aaa,$555,$aaa,$666,$aaa,$777
	dc.w $aaa,$888,$aaa,$999,$aaa,$aaa,$aaa,$bbb
	dc.w $aaa,$ccc,$aaa,$ddd,$aaa,$eee,$aaa,$fff
	dc.w $bbb,$000,$bbb,$111,$bbb,$222,$bbb,$333
	dc.w $bbb,$444,$bbb,$555,$bbb,$666,$bbb,$777
	dc.w $bbb,$888,$bbb,$999,$bbb,$aaa,$bbb,$bbb
	dc.w $bbb,$ccc,$bbb,$ddd,$bbb,$eee,$bbb,$fff
	dc.w $ccc,$000,$ccc,$111,$ccc,$222,$ccc,$333
	dc.w $ccc,$444,$ccc,$555,$ccc,$666,$ccc,$777
	dc.w $ccc,$888,$ccc,$999,$ccc,$aaa,$ccc,$bbb
	dc.w $ccc,$ccc,$ccc,$ddd,$ccc,$eee,$ccc,$fff
	dc.w $ddd,$000,$ddd,$111,$ddd,$222,$ddd,$333
	dc.w $ddd,$444,$ddd,$555,$ddd,$666,$ddd,$777
	dc.w $ddd,$888,$ddd,$999,$ddd,$aaa,$ddd,$bbb
	dc.w $ddd,$ccc,$ddd,$ddd,$ddd,$eee,$ddd,$fff
	dc.w $eee,$000,$eee,$111,$eee,$222,$eee,$333
	dc.w $eee,$444,$eee,$555,$eee,$666,$eee,$777
	dc.w $eee,$888,$eee,$999,$eee,$aaa,$eee,$bbb
	dc.w $eee,$ccc,$eee,$ddd,$eee,$eee,$eee,$fff
	dc.w $fff,$000,$fff,$111,$fff,$222,$fff,$333
	dc.w $fff,$444,$fff,$555,$fff,$666,$fff,$777
	dc.w $fff,$888,$fff,$999,$fff,$aaa,$fff,$bbb
	dc.w $fff,$ccc,$fff,$ddd,$fff,$eee`);
    });

    it("formats for atariSt", () => {
      let result = output.formatTableAsm(values, {
        rowSize: 8,
        varName: "Gradient",
        target: targets.atariSt,
      });
      expect(result).toBe(`Gradient:
	dc.w $000,$000,$000,$000,$000,$000,$000,$000
	dc.w $000,$000,$000,$000,$000,$000,$000,$000
	dc.w $000,$000,$000,$000,$000,$000,$000,$000
	dc.w $000,$000,$000,$000,$000,$000,$000,$000
	dc.w $111,$111,$111,$111,$111,$111,$111,$111
	dc.w $111,$111,$111,$111,$111,$111,$111,$111
	dc.w $111,$111,$111,$111,$111,$111,$111,$111
	dc.w $111,$111,$111,$111,$111,$111,$111,$111
	dc.w $222,$222,$222,$222,$222,$222,$222,$222
	dc.w $222,$222,$222,$222,$222,$222,$222,$222
	dc.w $222,$222,$222,$222,$222,$222,$222,$222
	dc.w $222,$222,$222,$222,$222,$222,$222,$222
	dc.w $333,$333,$333,$333,$333,$333,$333,$333
	dc.w $333,$333,$333,$333,$333,$333,$333,$333
	dc.w $333,$333,$333,$333,$333,$333,$333,$333
	dc.w $333,$333,$333,$333,$333,$333,$333,$333
	dc.w $444,$444,$444,$444,$444,$444,$444,$444
	dc.w $444,$444,$444,$444,$444,$444,$444,$444
	dc.w $444,$444,$444,$444,$444,$444,$444,$444
	dc.w $444,$444,$444,$444,$444,$444,$444,$444
	dc.w $555,$555,$555,$555,$555,$555,$555,$555
	dc.w $555,$555,$555,$555,$555,$555,$555,$555
	dc.w $555,$555,$555,$555,$555,$555,$555,$555
	dc.w $555,$555,$555,$555,$555,$555,$555,$555
	dc.w $666,$666,$666,$666,$666,$666,$666,$666
	dc.w $666,$666,$666,$666,$666,$666,$666,$666
	dc.w $666,$666,$666,$666,$666,$666,$666,$666
	dc.w $666,$666,$666,$666,$666,$666,$666,$666
	dc.w $777,$777,$777,$777,$777,$777,$777,$777
	dc.w $777,$777,$777,$777,$777,$777,$777,$777
	dc.w $777,$777,$777,$777,$777,$777,$777,$777
	dc.w $777,$777,$777,$777,$777,$777,$777`);
    });

    it("formats for atariSte", () => {
      let result = output.formatTableAsm(values, {
        rowSize: 8,
        varName: "Gradient",
        target: targets.atariSte,
      });
      expect(result).toBe(`Gradient:
	dc.w $000,$000,$000,$000,$000,$000,$000,$000
	dc.w $000,$000,$000,$000,$000,$000,$000,$000
	dc.w $888,$888,$888,$888,$888,$888,$888,$888
	dc.w $888,$888,$888,$888,$888,$888,$888,$888
	dc.w $111,$111,$111,$111,$111,$111,$111,$111
	dc.w $111,$111,$111,$111,$111,$111,$111,$111
	dc.w $999,$999,$999,$999,$999,$999,$999,$999
	dc.w $999,$999,$999,$999,$999,$999,$999,$999
	dc.w $222,$222,$222,$222,$222,$222,$222,$222
	dc.w $222,$222,$222,$222,$222,$222,$222,$222
	dc.w $aaa,$aaa,$aaa,$aaa,$aaa,$aaa,$aaa,$aaa
	dc.w $aaa,$aaa,$aaa,$aaa,$aaa,$aaa,$aaa,$aaa
	dc.w $333,$333,$333,$333,$333,$333,$333,$333
	dc.w $333,$333,$333,$333,$333,$333,$333,$333
	dc.w $bbb,$bbb,$bbb,$bbb,$bbb,$bbb,$bbb,$bbb
	dc.w $bbb,$bbb,$bbb,$bbb,$bbb,$bbb,$bbb,$bbb
	dc.w $444,$444,$444,$444,$444,$444,$444,$444
	dc.w $444,$444,$444,$444,$444,$444,$444,$444
	dc.w $ccc,$ccc,$ccc,$ccc,$ccc,$ccc,$ccc,$ccc
	dc.w $ccc,$ccc,$ccc,$ccc,$ccc,$ccc,$ccc,$ccc
	dc.w $555,$555,$555,$555,$555,$555,$555,$555
	dc.w $555,$555,$555,$555,$555,$555,$555,$555
	dc.w $ddd,$ddd,$ddd,$ddd,$ddd,$ddd,$ddd,$ddd
	dc.w $ddd,$ddd,$ddd,$ddd,$ddd,$ddd,$ddd,$ddd
	dc.w $666,$666,$666,$666,$666,$666,$666,$666
	dc.w $666,$666,$666,$666,$666,$666,$666,$666
	dc.w $eee,$eee,$eee,$eee,$eee,$eee,$eee,$eee
	dc.w $eee,$eee,$eee,$eee,$eee,$eee,$eee,$eee
	dc.w $777,$777,$777,$777,$777,$777,$777,$777
	dc.w $777,$777,$777,$777,$777,$777,$777,$777
	dc.w $fff,$fff,$fff,$fff,$fff,$fff,$fff,$fff
	dc.w $fff,$fff,$fff,$fff,$fff,$fff,$fff`);
    });

    it("formats for atariFalcon", () => {
      let result = output.formatTableAsm(values, {
        rowSize: 8,
        varName: "Gradient",
        target: targets.atariFalcon,
      });
      expect(result).toBe(`Gradient:
	dc.l $00000000,$00000000,$00000000,$00000000,$04040004,$04040004,$04040004,$04040004
	dc.l $08080008,$08080008,$08080008,$08080008,$0c0c000c,$0c0c000c,$0c0c000c,$0c0c000c
	dc.l $10100010,$10100010,$10100010,$10100010,$14140014,$14140014,$14140014,$14140014
	dc.l $18180018,$18180018,$18180018,$18180018,$1c1c001c,$1c1c001c,$1c1c001c,$1c1c001c
	dc.l $20200020,$20200020,$20200020,$20200020,$24240024,$24240024,$24240024,$24240024
	dc.l $28280028,$28280028,$28280028,$28280028,$2c2c002c,$2c2c002c,$2c2c002c,$2c2c002c
	dc.l $30300030,$30300030,$30300030,$30300030,$34340034,$34340034,$34340034,$34340034
	dc.l $38380038,$38380038,$38380038,$38380038,$3c3c003c,$3c3c003c,$3c3c003c,$3c3c003c
	dc.l $40400040,$40400040,$40400040,$40400040,$44440044,$44440044,$44440044,$44440044
	dc.l $48480048,$48480048,$48480048,$48480048,$4c4c004c,$4c4c004c,$4c4c004c,$4c4c004c
	dc.l $50500050,$50500050,$50500050,$50500050,$54540054,$54540054,$54540054,$54540054
	dc.l $58580058,$58580058,$58580058,$58580058,$5c5c005c,$5c5c005c,$5c5c005c,$5c5c005c
	dc.l $60600060,$60600060,$60600060,$60600060,$64640064,$64640064,$64640064,$64640064
	dc.l $68680068,$68680068,$68680068,$68680068,$6c6c006c,$6c6c006c,$6c6c006c,$6c6c006c
	dc.l $70700070,$70700070,$70700070,$70700070,$74740074,$74740074,$74740074,$74740074
	dc.l $78780078,$78780078,$78780078,$78780078,$7c7c007c,$7c7c007c,$7c7c007c,$7c7c007c
	dc.l $80800080,$80800080,$80800080,$80800080,$84840084,$84840084,$84840084,$84840084
	dc.l $88880088,$88880088,$88880088,$88880088,$8c8c008c,$8c8c008c,$8c8c008c,$8c8c008c
	dc.l $90900090,$90900090,$90900090,$90900090,$94940094,$94940094,$94940094,$94940094
	dc.l $98980098,$98980098,$98980098,$98980098,$9c9c009c,$9c9c009c,$9c9c009c,$9c9c009c
	dc.l $a0a000a0,$a0a000a0,$a0a000a0,$a0a000a0,$a4a400a4,$a4a400a4,$a4a400a4,$a4a400a4
	dc.l $a8a800a8,$a8a800a8,$a8a800a8,$a8a800a8,$acac00ac,$acac00ac,$acac00ac,$acac00ac
	dc.l $b0b000b0,$b0b000b0,$b0b000b0,$b0b000b0,$b4b400b4,$b4b400b4,$b4b400b4,$b4b400b4
	dc.l $b8b800b8,$b8b800b8,$b8b800b8,$b8b800b8,$bcbc00bc,$bcbc00bc,$bcbc00bc,$bcbc00bc
	dc.l $c0c000c0,$c0c000c0,$c0c000c0,$c0c000c0,$c4c400c4,$c4c400c4,$c4c400c4,$c4c400c4
	dc.l $c8c800c8,$c8c800c8,$c8c800c8,$c8c800c8,$cccc00cc,$cccc00cc,$cccc00cc,$cccc00cc
	dc.l $d0d000d0,$d0d000d0,$d0d000d0,$d0d000d0,$d4d400d4,$d4d400d4,$d4d400d4,$d4d400d4
	dc.l $d8d800d8,$d8d800d8,$d8d800d8,$d8d800d8,$dcdc00dc,$dcdc00dc,$dcdc00dc,$dcdc00dc
	dc.l $e0e000e0,$e0e000e0,$e0e000e0,$e0e000e0,$e4e400e4,$e4e400e4,$e4e400e4,$e4e400e4
	dc.l $e8e800e8,$e8e800e8,$e8e800e8,$e8e800e8,$ecec00ec,$ecec00ec,$ecec00ec,$ecec00ec
	dc.l $f0f000f0,$f0f000f0,$f0f000f0,$f0f000f0,$f4f400f4,$f4f400f4,$f4f400f4,$f4f400f4
	dc.l $f8f800f8,$f8f800f8,$f8f800f8,$f8f800f8,$fcfc00fc,$fcfc00fc,$fcfc00fc`);
    });

    it("formats for atariFalconTruecolor", () => {
      let result = output.formatTableAsm(values, {
        rowSize: 8,
        varName: "Gradient",
        target: targets.atariFalconTruecolor,
      });
      expect(result).toBe(`Gradient:
	dc.w $0000,$0000,$0000,$0000,$0020,$0020,$0020,$0020
	dc.w $0841,$0841,$0841,$0841,$0861,$0861,$0861,$0861
	dc.w $1082,$1082,$1082,$1082,$10a2,$10a2,$10a2,$10a2
	dc.w $18c3,$18c3,$18c3,$18c3,$18e3,$18e3,$18e3,$18e3
	dc.w $2104,$2104,$2104,$2104,$2124,$2124,$2124,$2124
	dc.w $2945,$2945,$2945,$2945,$2965,$2965,$2965,$2965
	dc.w $3186,$3186,$3186,$3186,$31a6,$31a6,$31a6,$31a6
	dc.w $39c7,$39c7,$39c7,$39c7,$39e7,$39e7,$39e7,$39e7
	dc.w $4208,$4208,$4208,$4208,$4228,$4228,$4228,$4228
	dc.w $4a49,$4a49,$4a49,$4a49,$4a69,$4a69,$4a69,$4a69
	dc.w $528a,$528a,$528a,$528a,$52aa,$52aa,$52aa,$52aa
	dc.w $5acb,$5acb,$5acb,$5acb,$5aeb,$5aeb,$5aeb,$5aeb
	dc.w $630c,$630c,$630c,$630c,$632c,$632c,$632c,$632c
	dc.w $6b4d,$6b4d,$6b4d,$6b4d,$6b6d,$6b6d,$6b6d,$6b6d
	dc.w $738e,$738e,$738e,$738e,$73ae,$73ae,$73ae,$73ae
	dc.w $7bcf,$7bcf,$7bcf,$7bcf,$7bef,$7bef,$7bef,$7bef
	dc.w $8410,$8410,$8410,$8410,$8430,$8430,$8430,$8430
	dc.w $8c51,$8c51,$8c51,$8c51,$8c71,$8c71,$8c71,$8c71
	dc.w $9492,$9492,$9492,$9492,$94b2,$94b2,$94b2,$94b2
	dc.w $9cd3,$9cd3,$9cd3,$9cd3,$9cf3,$9cf3,$9cf3,$9cf3
	dc.w $a514,$a514,$a514,$a514,$a534,$a534,$a534,$a534
	dc.w $ad55,$ad55,$ad55,$ad55,$ad75,$ad75,$ad75,$ad75
	dc.w $b596,$b596,$b596,$b596,$b5b6,$b5b6,$b5b6,$b5b6
	dc.w $bdd7,$bdd7,$bdd7,$bdd7,$bdf7,$bdf7,$bdf7,$bdf7
	dc.w $c618,$c618,$c618,$c618,$c638,$c638,$c638,$c638
	dc.w $ce59,$ce59,$ce59,$ce59,$ce79,$ce79,$ce79,$ce79
	dc.w $d69a,$d69a,$d69a,$d69a,$d6ba,$d6ba,$d6ba,$d6ba
	dc.w $dedb,$dedb,$dedb,$dedb,$defb,$defb,$defb,$defb
	dc.w $e71c,$e71c,$e71c,$e71c,$e73c,$e73c,$e73c,$e73c
	dc.w $ef5d,$ef5d,$ef5d,$ef5d,$ef7d,$ef7d,$ef7d,$ef7d
	dc.w $f79e,$f79e,$f79e,$f79e,$f7be,$f7be,$f7be,$f7be
	dc.w $ffdf,$ffdf,$ffdf,$ffdf,$ffff,$ffff,$ffff`);
    });

    it("allows setting label", () => {
      let result = output.formatTableAsm(values, {
        rowSize: 8,
        varName: "Foo",
        target: targets.amigaOcs,
      });
      expect(result).toMatch(/^Foo:/);
    });

    it("allows setting row size", () => {
      let result = output.formatTableAsm(values, {
        rowSize: 16,
        varName: "Gradient",
        target: targets.amigaOcs,
      });
      expect(result).toContain(
        "\tdc.w $000,$000,$000,$000,$000,$000,$000,$000,$000,$000,$000,$000,$000,$000,$000,$000\n"
      );
    });
  });

  describe("formatTableC()", () => {
    it("formats for amigaOcs", () => {
      let result = output.formatTableC(values, {
        rowSize: 8,
        varName: "Gradient",
        target: targets.amigaOcs,
      });
      expect(result).toBe(`unsigned short Gradient[255] = {
	0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000,
	0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000,
	0x111,0x111,0x111,0x111,0x111,0x111,0x111,0x111,
	0x111,0x111,0x111,0x111,0x111,0x111,0x111,0x111,
	0x222,0x222,0x222,0x222,0x222,0x222,0x222,0x222,
	0x222,0x222,0x222,0x222,0x222,0x222,0x222,0x222,
	0x333,0x333,0x333,0x333,0x333,0x333,0x333,0x333,
	0x333,0x333,0x333,0x333,0x333,0x333,0x333,0x333,
	0x444,0x444,0x444,0x444,0x444,0x444,0x444,0x444,
	0x444,0x444,0x444,0x444,0x444,0x444,0x444,0x444,
	0x555,0x555,0x555,0x555,0x555,0x555,0x555,0x555,
	0x555,0x555,0x555,0x555,0x555,0x555,0x555,0x555,
	0x666,0x666,0x666,0x666,0x666,0x666,0x666,0x666,
	0x666,0x666,0x666,0x666,0x666,0x666,0x666,0x666,
	0x777,0x777,0x777,0x777,0x777,0x777,0x777,0x777,
	0x777,0x777,0x777,0x777,0x777,0x777,0x777,0x777,
	0x888,0x888,0x888,0x888,0x888,0x888,0x888,0x888,
	0x888,0x888,0x888,0x888,0x888,0x888,0x888,0x888,
	0x999,0x999,0x999,0x999,0x999,0x999,0x999,0x999,
	0x999,0x999,0x999,0x999,0x999,0x999,0x999,0x999,
	0xaaa,0xaaa,0xaaa,0xaaa,0xaaa,0xaaa,0xaaa,0xaaa,
	0xaaa,0xaaa,0xaaa,0xaaa,0xaaa,0xaaa,0xaaa,0xaaa,
	0xbbb,0xbbb,0xbbb,0xbbb,0xbbb,0xbbb,0xbbb,0xbbb,
	0xbbb,0xbbb,0xbbb,0xbbb,0xbbb,0xbbb,0xbbb,0xbbb,
	0xccc,0xccc,0xccc,0xccc,0xccc,0xccc,0xccc,0xccc,
	0xccc,0xccc,0xccc,0xccc,0xccc,0xccc,0xccc,0xccc,
	0xddd,0xddd,0xddd,0xddd,0xddd,0xddd,0xddd,0xddd,
	0xddd,0xddd,0xddd,0xddd,0xddd,0xddd,0xddd,0xddd,
	0xeee,0xeee,0xeee,0xeee,0xeee,0xeee,0xeee,0xeee,
	0xeee,0xeee,0xeee,0xeee,0xeee,0xeee,0xeee,0xeee,
	0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,
	0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff
};`);
    });

    it("formats for amigaAga", () => {
      let result = output.formatTableC(values, {
        rowSize: 8,
        varName: "Gradient",
        target: targets.amigaAga,
      });
      expect(result).toBe(`unsigned short Gradient[510] = {
	0x000,0x000,0x000,0x111,0x000,0x222,0x000,0x333,
	0x000,0x444,0x000,0x555,0x000,0x666,0x000,0x777,
	0x000,0x888,0x000,0x999,0x000,0xaaa,0x000,0xbbb,
	0x000,0xccc,0x000,0xddd,0x000,0xeee,0x000,0xfff,
	0x111,0x000,0x111,0x111,0x111,0x222,0x111,0x333,
	0x111,0x444,0x111,0x555,0x111,0x666,0x111,0x777,
	0x111,0x888,0x111,0x999,0x111,0xaaa,0x111,0xbbb,
	0x111,0xccc,0x111,0xddd,0x111,0xeee,0x111,0xfff,
	0x222,0x000,0x222,0x111,0x222,0x222,0x222,0x333,
	0x222,0x444,0x222,0x555,0x222,0x666,0x222,0x777,
	0x222,0x888,0x222,0x999,0x222,0xaaa,0x222,0xbbb,
	0x222,0xccc,0x222,0xddd,0x222,0xeee,0x222,0xfff,
	0x333,0x000,0x333,0x111,0x333,0x222,0x333,0x333,
	0x333,0x444,0x333,0x555,0x333,0x666,0x333,0x777,
	0x333,0x888,0x333,0x999,0x333,0xaaa,0x333,0xbbb,
	0x333,0xccc,0x333,0xddd,0x333,0xeee,0x333,0xfff,
	0x444,0x000,0x444,0x111,0x444,0x222,0x444,0x333,
	0x444,0x444,0x444,0x555,0x444,0x666,0x444,0x777,
	0x444,0x888,0x444,0x999,0x444,0xaaa,0x444,0xbbb,
	0x444,0xccc,0x444,0xddd,0x444,0xeee,0x444,0xfff,
	0x555,0x000,0x555,0x111,0x555,0x222,0x555,0x333,
	0x555,0x444,0x555,0x555,0x555,0x666,0x555,0x777,
	0x555,0x888,0x555,0x999,0x555,0xaaa,0x555,0xbbb,
	0x555,0xccc,0x555,0xddd,0x555,0xeee,0x555,0xfff,
	0x666,0x000,0x666,0x111,0x666,0x222,0x666,0x333,
	0x666,0x444,0x666,0x555,0x666,0x666,0x666,0x777,
	0x666,0x888,0x666,0x999,0x666,0xaaa,0x666,0xbbb,
	0x666,0xccc,0x666,0xddd,0x666,0xeee,0x666,0xfff,
	0x777,0x000,0x777,0x111,0x777,0x222,0x777,0x333,
	0x777,0x444,0x777,0x555,0x777,0x666,0x777,0x777,
	0x777,0x888,0x777,0x999,0x777,0xaaa,0x777,0xbbb,
	0x777,0xccc,0x777,0xddd,0x777,0xeee,0x777,0xfff,
	0x888,0x000,0x888,0x111,0x888,0x222,0x888,0x333,
	0x888,0x444,0x888,0x555,0x888,0x666,0x888,0x777,
	0x888,0x888,0x888,0x999,0x888,0xaaa,0x888,0xbbb,
	0x888,0xccc,0x888,0xddd,0x888,0xeee,0x888,0xfff,
	0x999,0x000,0x999,0x111,0x999,0x222,0x999,0x333,
	0x999,0x444,0x999,0x555,0x999,0x666,0x999,0x777,
	0x999,0x888,0x999,0x999,0x999,0xaaa,0x999,0xbbb,
	0x999,0xccc,0x999,0xddd,0x999,0xeee,0x999,0xfff,
	0xaaa,0x000,0xaaa,0x111,0xaaa,0x222,0xaaa,0x333,
	0xaaa,0x444,0xaaa,0x555,0xaaa,0x666,0xaaa,0x777,
	0xaaa,0x888,0xaaa,0x999,0xaaa,0xaaa,0xaaa,0xbbb,
	0xaaa,0xccc,0xaaa,0xddd,0xaaa,0xeee,0xaaa,0xfff,
	0xbbb,0x000,0xbbb,0x111,0xbbb,0x222,0xbbb,0x333,
	0xbbb,0x444,0xbbb,0x555,0xbbb,0x666,0xbbb,0x777,
	0xbbb,0x888,0xbbb,0x999,0xbbb,0xaaa,0xbbb,0xbbb,
	0xbbb,0xccc,0xbbb,0xddd,0xbbb,0xeee,0xbbb,0xfff,
	0xccc,0x000,0xccc,0x111,0xccc,0x222,0xccc,0x333,
	0xccc,0x444,0xccc,0x555,0xccc,0x666,0xccc,0x777,
	0xccc,0x888,0xccc,0x999,0xccc,0xaaa,0xccc,0xbbb,
	0xccc,0xccc,0xccc,0xddd,0xccc,0xeee,0xccc,0xfff,
	0xddd,0x000,0xddd,0x111,0xddd,0x222,0xddd,0x333,
	0xddd,0x444,0xddd,0x555,0xddd,0x666,0xddd,0x777,
	0xddd,0x888,0xddd,0x999,0xddd,0xaaa,0xddd,0xbbb,
	0xddd,0xccc,0xddd,0xddd,0xddd,0xeee,0xddd,0xfff,
	0xeee,0x000,0xeee,0x111,0xeee,0x222,0xeee,0x333,
	0xeee,0x444,0xeee,0x555,0xeee,0x666,0xeee,0x777,
	0xeee,0x888,0xeee,0x999,0xeee,0xaaa,0xeee,0xbbb,
	0xeee,0xccc,0xeee,0xddd,0xeee,0xeee,0xeee,0xfff,
	0xfff,0x000,0xfff,0x111,0xfff,0x222,0xfff,0x333,
	0xfff,0x444,0xfff,0x555,0xfff,0x666,0xfff,0x777,
	0xfff,0x888,0xfff,0x999,0xfff,0xaaa,0xfff,0xbbb,
	0xfff,0xccc,0xfff,0xddd,0xfff,0xeee
};`);
    });

    it("formats for atariSt", () => {
      let result = output.formatTableC(values, {
        rowSize: 8,
        varName: "Gradient",
        target: targets.atariSt,
      });
      expect(result).toBe(`unsigned short Gradient[255] = {
	0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000,
	0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000,
	0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000,
	0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000,
	0x111,0x111,0x111,0x111,0x111,0x111,0x111,0x111,
	0x111,0x111,0x111,0x111,0x111,0x111,0x111,0x111,
	0x111,0x111,0x111,0x111,0x111,0x111,0x111,0x111,
	0x111,0x111,0x111,0x111,0x111,0x111,0x111,0x111,
	0x222,0x222,0x222,0x222,0x222,0x222,0x222,0x222,
	0x222,0x222,0x222,0x222,0x222,0x222,0x222,0x222,
	0x222,0x222,0x222,0x222,0x222,0x222,0x222,0x222,
	0x222,0x222,0x222,0x222,0x222,0x222,0x222,0x222,
	0x333,0x333,0x333,0x333,0x333,0x333,0x333,0x333,
	0x333,0x333,0x333,0x333,0x333,0x333,0x333,0x333,
	0x333,0x333,0x333,0x333,0x333,0x333,0x333,0x333,
	0x333,0x333,0x333,0x333,0x333,0x333,0x333,0x333,
	0x444,0x444,0x444,0x444,0x444,0x444,0x444,0x444,
	0x444,0x444,0x444,0x444,0x444,0x444,0x444,0x444,
	0x444,0x444,0x444,0x444,0x444,0x444,0x444,0x444,
	0x444,0x444,0x444,0x444,0x444,0x444,0x444,0x444,
	0x555,0x555,0x555,0x555,0x555,0x555,0x555,0x555,
	0x555,0x555,0x555,0x555,0x555,0x555,0x555,0x555,
	0x555,0x555,0x555,0x555,0x555,0x555,0x555,0x555,
	0x555,0x555,0x555,0x555,0x555,0x555,0x555,0x555,
	0x666,0x666,0x666,0x666,0x666,0x666,0x666,0x666,
	0x666,0x666,0x666,0x666,0x666,0x666,0x666,0x666,
	0x666,0x666,0x666,0x666,0x666,0x666,0x666,0x666,
	0x666,0x666,0x666,0x666,0x666,0x666,0x666,0x666,
	0x777,0x777,0x777,0x777,0x777,0x777,0x777,0x777,
	0x777,0x777,0x777,0x777,0x777,0x777,0x777,0x777,
	0x777,0x777,0x777,0x777,0x777,0x777,0x777,0x777,
	0x777,0x777,0x777,0x777,0x777,0x777,0x777
};`);
    });

    it("formats for atariSte", () => {
      let result = output.formatTableC(values, {
        rowSize: 8,
        varName: "Gradient",
        target: targets.atariSte,
      });
      expect(result).toBe(`unsigned short Gradient[255] = {
	0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000,
	0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000,
	0x888,0x888,0x888,0x888,0x888,0x888,0x888,0x888,
	0x888,0x888,0x888,0x888,0x888,0x888,0x888,0x888,
	0x111,0x111,0x111,0x111,0x111,0x111,0x111,0x111,
	0x111,0x111,0x111,0x111,0x111,0x111,0x111,0x111,
	0x999,0x999,0x999,0x999,0x999,0x999,0x999,0x999,
	0x999,0x999,0x999,0x999,0x999,0x999,0x999,0x999,
	0x222,0x222,0x222,0x222,0x222,0x222,0x222,0x222,
	0x222,0x222,0x222,0x222,0x222,0x222,0x222,0x222,
	0xaaa,0xaaa,0xaaa,0xaaa,0xaaa,0xaaa,0xaaa,0xaaa,
	0xaaa,0xaaa,0xaaa,0xaaa,0xaaa,0xaaa,0xaaa,0xaaa,
	0x333,0x333,0x333,0x333,0x333,0x333,0x333,0x333,
	0x333,0x333,0x333,0x333,0x333,0x333,0x333,0x333,
	0xbbb,0xbbb,0xbbb,0xbbb,0xbbb,0xbbb,0xbbb,0xbbb,
	0xbbb,0xbbb,0xbbb,0xbbb,0xbbb,0xbbb,0xbbb,0xbbb,
	0x444,0x444,0x444,0x444,0x444,0x444,0x444,0x444,
	0x444,0x444,0x444,0x444,0x444,0x444,0x444,0x444,
	0xccc,0xccc,0xccc,0xccc,0xccc,0xccc,0xccc,0xccc,
	0xccc,0xccc,0xccc,0xccc,0xccc,0xccc,0xccc,0xccc,
	0x555,0x555,0x555,0x555,0x555,0x555,0x555,0x555,
	0x555,0x555,0x555,0x555,0x555,0x555,0x555,0x555,
	0xddd,0xddd,0xddd,0xddd,0xddd,0xddd,0xddd,0xddd,
	0xddd,0xddd,0xddd,0xddd,0xddd,0xddd,0xddd,0xddd,
	0x666,0x666,0x666,0x666,0x666,0x666,0x666,0x666,
	0x666,0x666,0x666,0x666,0x666,0x666,0x666,0x666,
	0xeee,0xeee,0xeee,0xeee,0xeee,0xeee,0xeee,0xeee,
	0xeee,0xeee,0xeee,0xeee,0xeee,0xeee,0xeee,0xeee,
	0x777,0x777,0x777,0x777,0x777,0x777,0x777,0x777,
	0x777,0x777,0x777,0x777,0x777,0x777,0x777,0x777,
	0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,
	0xfff,0xfff,0xfff,0xfff,0xfff,0xfff,0xfff
};`);
    });

    it("formats for atariFalcon", () => {
      let result = output.formatTableC(values, {
        rowSize: 8,
        varName: "Gradient",
        target: targets.atariFalcon,
      });
      expect(result).toBe(`unsigned long Gradient[255] = {
	0x00000000,0x00000000,0x00000000,0x00000000,0x04040004,0x04040004,0x04040004,0x04040004,
	0x08080008,0x08080008,0x08080008,0x08080008,0x0c0c000c,0x0c0c000c,0x0c0c000c,0x0c0c000c,
	0x10100010,0x10100010,0x10100010,0x10100010,0x14140014,0x14140014,0x14140014,0x14140014,
	0x18180018,0x18180018,0x18180018,0x18180018,0x1c1c001c,0x1c1c001c,0x1c1c001c,0x1c1c001c,
	0x20200020,0x20200020,0x20200020,0x20200020,0x24240024,0x24240024,0x24240024,0x24240024,
	0x28280028,0x28280028,0x28280028,0x28280028,0x2c2c002c,0x2c2c002c,0x2c2c002c,0x2c2c002c,
	0x30300030,0x30300030,0x30300030,0x30300030,0x34340034,0x34340034,0x34340034,0x34340034,
	0x38380038,0x38380038,0x38380038,0x38380038,0x3c3c003c,0x3c3c003c,0x3c3c003c,0x3c3c003c,
	0x40400040,0x40400040,0x40400040,0x40400040,0x44440044,0x44440044,0x44440044,0x44440044,
	0x48480048,0x48480048,0x48480048,0x48480048,0x4c4c004c,0x4c4c004c,0x4c4c004c,0x4c4c004c,
	0x50500050,0x50500050,0x50500050,0x50500050,0x54540054,0x54540054,0x54540054,0x54540054,
	0x58580058,0x58580058,0x58580058,0x58580058,0x5c5c005c,0x5c5c005c,0x5c5c005c,0x5c5c005c,
	0x60600060,0x60600060,0x60600060,0x60600060,0x64640064,0x64640064,0x64640064,0x64640064,
	0x68680068,0x68680068,0x68680068,0x68680068,0x6c6c006c,0x6c6c006c,0x6c6c006c,0x6c6c006c,
	0x70700070,0x70700070,0x70700070,0x70700070,0x74740074,0x74740074,0x74740074,0x74740074,
	0x78780078,0x78780078,0x78780078,0x78780078,0x7c7c007c,0x7c7c007c,0x7c7c007c,0x7c7c007c,
	0x80800080,0x80800080,0x80800080,0x80800080,0x84840084,0x84840084,0x84840084,0x84840084,
	0x88880088,0x88880088,0x88880088,0x88880088,0x8c8c008c,0x8c8c008c,0x8c8c008c,0x8c8c008c,
	0x90900090,0x90900090,0x90900090,0x90900090,0x94940094,0x94940094,0x94940094,0x94940094,
	0x98980098,0x98980098,0x98980098,0x98980098,0x9c9c009c,0x9c9c009c,0x9c9c009c,0x9c9c009c,
	0xa0a000a0,0xa0a000a0,0xa0a000a0,0xa0a000a0,0xa4a400a4,0xa4a400a4,0xa4a400a4,0xa4a400a4,
	0xa8a800a8,0xa8a800a8,0xa8a800a8,0xa8a800a8,0xacac00ac,0xacac00ac,0xacac00ac,0xacac00ac,
	0xb0b000b0,0xb0b000b0,0xb0b000b0,0xb0b000b0,0xb4b400b4,0xb4b400b4,0xb4b400b4,0xb4b400b4,
	0xb8b800b8,0xb8b800b8,0xb8b800b8,0xb8b800b8,0xbcbc00bc,0xbcbc00bc,0xbcbc00bc,0xbcbc00bc,
	0xc0c000c0,0xc0c000c0,0xc0c000c0,0xc0c000c0,0xc4c400c4,0xc4c400c4,0xc4c400c4,0xc4c400c4,
	0xc8c800c8,0xc8c800c8,0xc8c800c8,0xc8c800c8,0xcccc00cc,0xcccc00cc,0xcccc00cc,0xcccc00cc,
	0xd0d000d0,0xd0d000d0,0xd0d000d0,0xd0d000d0,0xd4d400d4,0xd4d400d4,0xd4d400d4,0xd4d400d4,
	0xd8d800d8,0xd8d800d8,0xd8d800d8,0xd8d800d8,0xdcdc00dc,0xdcdc00dc,0xdcdc00dc,0xdcdc00dc,
	0xe0e000e0,0xe0e000e0,0xe0e000e0,0xe0e000e0,0xe4e400e4,0xe4e400e4,0xe4e400e4,0xe4e400e4,
	0xe8e800e8,0xe8e800e8,0xe8e800e8,0xe8e800e8,0xecec00ec,0xecec00ec,0xecec00ec,0xecec00ec,
	0xf0f000f0,0xf0f000f0,0xf0f000f0,0xf0f000f0,0xf4f400f4,0xf4f400f4,0xf4f400f4,0xf4f400f4,
	0xf8f800f8,0xf8f800f8,0xf8f800f8,0xf8f800f8,0xfcfc00fc,0xfcfc00fc,0xfcfc00fc
};`);
    });

    it("formats for atariFalconTruecolor", () => {
      let result = output.formatTableC(values, {
        rowSize: 8,
        varName: "Gradient",
        target: targets.atariFalconTruecolor,
      });
      expect(result).toBe(`unsigned short Gradient[255] = {
	0x0000,0x0000,0x0000,0x0000,0x0020,0x0020,0x0020,0x0020,
	0x0841,0x0841,0x0841,0x0841,0x0861,0x0861,0x0861,0x0861,
	0x1082,0x1082,0x1082,0x1082,0x10a2,0x10a2,0x10a2,0x10a2,
	0x18c3,0x18c3,0x18c3,0x18c3,0x18e3,0x18e3,0x18e3,0x18e3,
	0x2104,0x2104,0x2104,0x2104,0x2124,0x2124,0x2124,0x2124,
	0x2945,0x2945,0x2945,0x2945,0x2965,0x2965,0x2965,0x2965,
	0x3186,0x3186,0x3186,0x3186,0x31a6,0x31a6,0x31a6,0x31a6,
	0x39c7,0x39c7,0x39c7,0x39c7,0x39e7,0x39e7,0x39e7,0x39e7,
	0x4208,0x4208,0x4208,0x4208,0x4228,0x4228,0x4228,0x4228,
	0x4a49,0x4a49,0x4a49,0x4a49,0x4a69,0x4a69,0x4a69,0x4a69,
	0x528a,0x528a,0x528a,0x528a,0x52aa,0x52aa,0x52aa,0x52aa,
	0x5acb,0x5acb,0x5acb,0x5acb,0x5aeb,0x5aeb,0x5aeb,0x5aeb,
	0x630c,0x630c,0x630c,0x630c,0x632c,0x632c,0x632c,0x632c,
	0x6b4d,0x6b4d,0x6b4d,0x6b4d,0x6b6d,0x6b6d,0x6b6d,0x6b6d,
	0x738e,0x738e,0x738e,0x738e,0x73ae,0x73ae,0x73ae,0x73ae,
	0x7bcf,0x7bcf,0x7bcf,0x7bcf,0x7bef,0x7bef,0x7bef,0x7bef,
	0x8410,0x8410,0x8410,0x8410,0x8430,0x8430,0x8430,0x8430,
	0x8c51,0x8c51,0x8c51,0x8c51,0x8c71,0x8c71,0x8c71,0x8c71,
	0x9492,0x9492,0x9492,0x9492,0x94b2,0x94b2,0x94b2,0x94b2,
	0x9cd3,0x9cd3,0x9cd3,0x9cd3,0x9cf3,0x9cf3,0x9cf3,0x9cf3,
	0xa514,0xa514,0xa514,0xa514,0xa534,0xa534,0xa534,0xa534,
	0xad55,0xad55,0xad55,0xad55,0xad75,0xad75,0xad75,0xad75,
	0xb596,0xb596,0xb596,0xb596,0xb5b6,0xb5b6,0xb5b6,0xb5b6,
	0xbdd7,0xbdd7,0xbdd7,0xbdd7,0xbdf7,0xbdf7,0xbdf7,0xbdf7,
	0xc618,0xc618,0xc618,0xc618,0xc638,0xc638,0xc638,0xc638,
	0xce59,0xce59,0xce59,0xce59,0xce79,0xce79,0xce79,0xce79,
	0xd69a,0xd69a,0xd69a,0xd69a,0xd6ba,0xd6ba,0xd6ba,0xd6ba,
	0xdedb,0xdedb,0xdedb,0xdedb,0xdefb,0xdefb,0xdefb,0xdefb,
	0xe71c,0xe71c,0xe71c,0xe71c,0xe73c,0xe73c,0xe73c,0xe73c,
	0xef5d,0xef5d,0xef5d,0xef5d,0xef7d,0xef7d,0xef7d,0xef7d,
	0xf79e,0xf79e,0xf79e,0xf79e,0xf7be,0xf7be,0xf7be,0xf7be,
	0xffdf,0xffdf,0xffdf,0xffdf,0xffff,0xffff,0xffff
};`);
    });

    it("allows setting label", () => {
      let result = output.formatTableC(values, {
        rowSize: 8,
        varName: "Foo",
        target: targets.amigaOcs,
      });
      expect(result).toContain("unsigned short Foo[255]");
    });

    it("allows setting row size", () => {
      let result = output.formatTableC(values, {
        rowSize: 16,
        varName: "Gradient",
        target: targets.amigaOcs,
      });
      expect(result).toContain(
        "\t0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000,\n"
      );
    });
  });

  describe("gradientToBytes()", () => {
    it("formats for amigaOcs", () => {
      let result = output.gradientToBytes(
        [
          [0xa, 0xb, 0xc],
          [0x1, 0x2, 0x3],
        ].map((v) => restoreBits(v as Color, 4)),
        targets.amigaOcs
      );
      expect(result).toEqual(new Uint8Array([0xa, 0xbc, 0x1, 0x23]));
    });

    it("formats for amigaAga", () => {
      let result = output.gradientToBytes(
        [
          [0xa1, 0xb2, 0xc3],
          [0xd4, 0xe5, 0xf6],
        ],
        targets.amigaAga
      );
      expect(result).toEqual(
        new Uint8Array([0xa, 0xbc, 0x1, 0x23, 0xd, 0xef, 0x4, 0x56])
      );
    });

    it("formats for atariSt", () => {
      let result = output.gradientToBytes(
        [
          [0x1, 0x2, 0x3],
          [0x4, 0x5, 0x6],
        ].map((v) => restoreBits(v as Color, 3)),
        targets.atariSt
      );
      expect(result).toEqual(new Uint8Array([0x1, 0x23, 0x4, 0x56]));
    });

    it("formats for atariSte", () => {
      let result = output.gradientToBytes(
        [
          [0xa, 0xb, 0xc],
          [0x1, 0x2, 0x3],
        ].map((v) => restoreBits(v as Color, 4)),
        targets.atariSte
      );
      expect(result).toEqual(new Uint8Array([0x5, 0xd6, 0x8, 0x19]));
    });

    it("formats for atariFalcon", () => {
      let result = output.gradientToBytes(
        [
          [0x1f, 0x3f, 0x1f],
          [0x10, 0x08, 0x00],
        ].map((v) => restoreBits(v as Color, 6)),
        targets.atariFalcon
      );
      expect(result).toEqual(new Uint8Array([124, 252, 0, 124, 64, 32, 0, 0]));
    });

    it("formats for atariFalconTrue", () => {
      let result = output.gradientToBytes(
        [
          [0x1f, 0x3f, 0x1f],
          [0x10, 0x08, 0x00],
        ].map((v) => restoreBits(v as Color, 6)),
        targets.atariFalconTruecolor
      );
      expect(result).toEqual(new Uint8Array([127, 239, 65, 0]));
    });
  });

  describe("base64Encode", () => {
    it("encodes a byte array", () => {
      let result = output.base64Encode(
        new Uint8Array(["a", "b", "c", "d"].map((s) => s.charCodeAt(0)))
      );
      expect(result).toBe("YWJjZA==");
    });
  });
});
